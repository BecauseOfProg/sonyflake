crystal_doc_search_index_callback({"repository_name":"","body":"# sonyflake\n\nA Crystal port of [sony/sonyflake](https://github.com/sony/sonyflake)\n\n## Installation\n\n2. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  sonyflake:\n    github: BecauseOfProg/sonyflake\n```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"sonyflake\"\nsettings = Sonyflake::Settings.new(start_time: Time.utc(2020, 1, 1), machine_id: 1)\n\nsonyflake = Sonyflake.new_sonyflake(settings)\nputs sonyflake.next_id # => 302603879411875841\nputs Sonyflake.get_instance.next_id # => 302603879411941377\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/BecauseOfProg/sonyflake/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Whaxion](https://github.com/Whaxion) - creator and maintainer\n","program":{"html_id":"/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/Sonyflake","path":"Sonyflake.html","kind":"module","full_name":"Sonyflake","name":"Sonyflake","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"BIT_LEN_MACHINE_ID","name":"BIT_LEN_MACHINE_ID","value":"(63 - BIT_LEN_TIME) - BIT_LEN_SEQUENCE","doc":null,"summary":null},{"id":"BIT_LEN_SEQUENCE","name":"BIT_LEN_SEQUENCE","value":"8","doc":null,"summary":null},{"id":"BIT_LEN_TIME","name":"BIT_LEN_TIME","value":"39","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A Crystal port of [sony/sonyflake](https://github.com/sony/sonyflake)\n\n```crystal\nrequire \"sonyflake\"\nsettings = Sonyflake::Settings.new(start_time: Time.utc(2020, 1, 1), machine_id: 1)\n\nsonyflake = Sonyflake.new_sonyflake(settings)\nputs sonyflake.next_id # => 302603879411875841\nputs Sonyflake.get_instance.next_id # => 302603879411941377\n```","summary":"<p>A Crystal port of <a href=\"https://github.com/sony/sonyflake\" target=\"_blank\">sony/sonyflake</a></p>","class_methods":[],"constructors":[{"id":"get_instance:Sonyflake-class-method","html_id":"get_instance:Sonyflake-class-method","name":"get_instance","doc":"Get previously created instance\n\n```crystal\nsonyflake = Sonyflake.get_instance\n```","summary":"<p>Get previously created instance</p>","abstract":false,"args":[],"args_string":" : Sonyflake","source_link":null,"def":{"name":"get_instance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Sonyflake","visibility":"Public","body":"if @@instance\n  return @@instance.as(Sonyflake)\nend\nraise(Error.new(\"Sonyflake not initialized\"))\n"}},{"id":"new_sonyflake(settings:Settings):Sonyflake?-class-method","html_id":"new_sonyflake(settings:Settings):Sonyflake?-class-method","name":"new_sonyflake","doc":"Generate a new sonyflake from the settings\n\n```crystal\nrequire \"sonyflake\"\nsettings = Sonyflake::Settings.new(start_time: Time.utc(2020, 1, 1), machine_id: 1_u16)\nsonyflake = Sonyflake.new_sonyflake(settings)\n```","summary":"<p>Generate a new sonyflake from the settings</p>","abstract":false,"args":[{"name":"settings","doc":null,"default_value":"","external_name":"settings","restriction":"Settings"}],"args_string":"(settings : Settings) : Sonyflake?","source_link":null,"def":{"name":"new_sonyflake","args":[{"name":"settings","doc":null,"default_value":"","external_name":"settings","restriction":"Settings"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Sonyflake | ::Nil","visibility":"Public","body":"if settings.start_time > Time.utc\n  return nil\nend\nstart_time = to_sonyflake_time(settings.start_time)\nbegin\n  machine_id = settings.machine_id\nrescue e : Error\n  return nil\nend\nif !(settings.check_machine_id(machine_id))\n  return nil\nend\n@@instance = Sonyflake.new(start_time, machine_id)\nreturn @@instance\n"}}],"instance_methods":[],"macros":[],"types":[{"html_id":"/Sonyflake/Error","path":"Sonyflake/Error.html","kind":"class","full_name":"Sonyflake::Error","name":"Error","abstract":false,"superclass":{"html_id":"/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/Sonyflake","kind":"module","full_name":"Sonyflake","name":"Sonyflake"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"/Sonyflake/Settings","path":"Sonyflake/Settings.html","kind":"class","full_name":"Sonyflake::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/Sonyflake","kind":"module","full_name":"Sonyflake","name":"Sonyflake"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(start_time:Time?=nil,machine_id:UInt16?=nil,check_machine_id:Proc(UInt16,Bool)?=nil)-class-method","html_id":"new(start_time:Time?=nil,machine_id:UInt16?=nil,check_machine_id:Proc(UInt16,Bool)?=nil)-class-method","name":"new","doc":"Create a new Sonyflake::Settings\n\n```crystal\nrequire \"sonyflake\"\nsettings = Sonyflake::Settings.new(start_time: Time.utc(2020, 1, 1))\n```\n* **start_time**: The time since which the Sonyflake time is defined. If start_time is nil, the start time is set to \"2014-09-01 00:00:00 +0000 UTC\".\n* **machine_id**: The unique ID of the Sonyflake instance. If machine_id is nil, the machine id is set to the lower 16 bits of the private ip address. (Not working right now)\n* **check_machine_id**: The callback (Proc) that validate the uniqueness of the machine id. If check_machine_id is nil, no validation is done.","summary":"<p>Create a new Sonyflake::Settings</p>","abstract":false,"args":[{"name":"start_time","doc":null,"default_value":"nil","external_name":"start_time","restriction":"Time | ::Nil"},{"name":"machine_id","doc":null,"default_value":"nil","external_name":"machine_id","restriction":"UInt16 | ::Nil"},{"name":"check_machine_id","doc":null,"default_value":"nil","external_name":"check_machine_id","restriction":"Proc(UInt16, Bool) | ::Nil"}],"args_string":"(start_time : Time? = <span class=\"n\">nil</span>, machine_id : UInt16? = <span class=\"n\">nil</span>, check_machine_id : Proc(UInt16, Bool)? = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"start_time","doc":null,"default_value":"nil","external_name":"start_time","restriction":"Time | ::Nil"},{"name":"machine_id","doc":null,"default_value":"nil","external_name":"machine_id","restriction":"UInt16 | ::Nil"},{"name":"check_machine_id","doc":null,"default_value":"nil","external_name":"check_machine_id","restriction":"Proc(UInt16, Bool) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(start_time, machine_id, check_machine_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"check_machine_id(machine_id:UInt16):Bool-instance-method","html_id":"check_machine_id(machine_id:UInt16):Bool-instance-method","name":"check_machine_id","doc":"Check machine_id","summary":"<p>Check machine_id</p>","abstract":false,"args":[{"name":"machine_id","doc":null,"default_value":"","external_name":"machine_id","restriction":"UInt16"}],"args_string":"(machine_id : UInt16) : Bool","source_link":null,"def":{"name":"check_machine_id","args":[{"name":"machine_id","doc":null,"default_value":"","external_name":"machine_id","restriction":"UInt16"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"return @check_machine_id_callback.call(machine_id)"}},{"id":"check_machine_id:Bool-instance-method","html_id":"check_machine_id:Bool-instance-method","name":"check_machine_id","doc":"Check machine_id","summary":"<p>Check machine_id</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"check_machine_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"return check_machine_id(machine_id)"}},{"id":"machine_id:UInt16-instance-method","html_id":"machine_id:UInt16-instance-method","name":"machine_id","doc":"Get machine_id","summary":"<p>Get machine_id</p>","abstract":false,"args":[],"args_string":" : UInt16","source_link":null,"def":{"name":"machine_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16","visibility":"Public","body":"if @machine_id\n  return @machine_id.as(UInt16)\nend\nraise(Error.new(\"TODO: Get 16 lower bits of private ip\"))\n"}},{"id":"start_time:Time-instance-method","html_id":"start_time:Time-instance-method","name":"start_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time","source_link":null,"def":{"name":"start_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"@start_time"}}],"macros":[],"types":[]},{"html_id":"/Sonyflake/Sonyflake","path":"Sonyflake/Sonyflake.html","kind":"class","full_name":"Sonyflake::Sonyflake","name":"Sonyflake","abstract":false,"superclass":{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/Sonyflake","kind":"module","full_name":"Sonyflake","name":"Sonyflake"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"elapsed_time:Int64-instance-method","html_id":"elapsed_time:Int64-instance-method","name":"elapsed_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"elapsed_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@elapsed_time"}},{"id":"machine_id:UInt16-instance-method","html_id":"machine_id:UInt16-instance-method","name":"machine_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt16","source_link":null,"def":{"name":"machine_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16","visibility":"Public","body":"@machine_id"}},{"id":"mutex:Mutex-instance-method","html_id":"mutex:Mutex-instance-method","name":"mutex","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Mutex","source_link":null,"def":{"name":"mutex","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mutex"}},{"id":"next_id:Tuple(UInt64,Error?)-instance-method","html_id":"next_id:Tuple(UInt64,Error?)-instance-method","name":"next_id","doc":"Get next Sonyflake ID\n\n```crystal\nrequire \"sonyflake\"\nsonyflake = Sonyflake.get_instance\nid = sonyflake.next_id\n```","summary":"<p>Get next Sonyflake ID</p>","abstract":false,"args":[],"args_string":" : Tuple(UInt64, Error?)","source_link":null,"def":{"name":"next_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(UInt64, Error | ::Nil)","visibility":"Public","body":"mask_sequence = (1_u16 << BIT_LEN_SEQUENCE) - 1_u16\n@mutex.lock\ncurrent = ::Sonyflake.current_elapsed_time(@start_time)\nif @elapsed_time < current\n  @elapsed_time = current\n  @sequence = 0\nelse\n  @sequence = (@sequence + 1) & mask_sequence\n  if @sequence == 0\n    @elapsed_time = @elapsed_time + 1\n    overtime = @elapsed_time - current\n    sleep(::Sonyflake.sleep_time(overtime))\n  end\nend\n@mutex.unlock\nreturn to_id\n"}},{"id":"sequence:UInt16-instance-method","html_id":"sequence:UInt16-instance-method","name":"sequence","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt16","source_link":null,"def":{"name":"sequence","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16","visibility":"Public","body":"@sequence"}},{"id":"start_time:Int64-instance-method","html_id":"start_time:Int64-instance-method","name":"start_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"start_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@start_time"}}],"macros":[],"types":[]}]}]}})